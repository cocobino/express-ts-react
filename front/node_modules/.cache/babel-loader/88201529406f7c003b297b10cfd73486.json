{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\Users\\\\ldk0225\\\\Desktop\\\\full-stack\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\Users\\\\ldk0225\\\\Desktop\\\\full-stack\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Users\\\\ldk0225\\\\Desktop\\\\full-stack\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _class2, _temp;\n\nimport { observable } from \"mobx\";\nimport axios from \"axios\";\nimport loginRepository from \"../Repository/loginRepository\";\nimport FriendModel from \"./friendModel\";\nlet LoginModel = (_class = (_temp = _class2 = class LoginModel {\n  constructor() {\n    _initializerDefineProperty(this, \"_isPossible\", _descriptor, this);\n\n    this._FriendModel = FriendModel.getInstance();\n  }\n\n  static getInstance() {\n    if (!this._LoginModel) this._LoginModel = new LoginModel();\n    return this._LoginModel;\n  }\n\n  sendLoginData(loginData) {\n    sessionStorage.setItem('id', loginData.id);\n    axios.interceptors.request.use(function (config) {\n      return config;\n    }, function (error) {\n      return Promise.reject(error);\n    });\n    axios.interceptors.response.use(function (response) {\n      return response;\n    }, function (error) {\n      return Promise.reject(error);\n    });\n    loginRepository.sendLoginData(loginData).then(d => {\n      this._isPossible = d.data ? 'success' : 'fail';\n\n      if (this._isPossible === 'success') {}\n    }).catch(err => {\n      this._isPossible = 'fail';\n      new Error(err);\n    });\n  }\n\n  get loginState() {\n    return this._isPossible;\n  }\n\n}, _class2._LoginModel = void 0, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_isPossible\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n})), _class);\nexport { LoginModel as default };","map":{"version":3,"sources":["C:/Users/ldk0225/Desktop/full-stack/front/src/pages/mainBoard/Model/loginModel.ts"],"names":["observable","axios","loginRepository","FriendModel","LoginModel","_FriendModel","getInstance","_LoginModel","sendLoginData","loginData","sessionStorage","setItem","id","interceptors","request","use","config","error","Promise","reject","response","then","d","_isPossible","data","catch","err","Error","loginState"],"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,MAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAAwC,+BAAxC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;IAEqBC,U,gCAAN,MAAMA,UAAN,CAAiB;AAAA;AAAA;;AAAA,SAGpBC,YAHoB,GAGQF,WAAW,CAACG,WAAZ,EAHR;AAAA;;AAK5B,SAAcA,WAAd,GAAuC;AACnC,QAAG,CAAC,KAAKC,WAAT,EAAsB,KAAKA,WAAL,GAAmB,IAAIH,UAAJ,EAAnB;AACtB,WAAO,KAAKG,WAAZ;AACH;;AAEDC,EAAAA,aAAa,CAACC,SAAD,EAAsB;AAC/BC,IAAAA,cAAc,CAACC,OAAf,CAAuB,IAAvB,EAA6BF,SAAS,CAACG,EAAvC;AACAX,IAAAA,KAAK,CAACY,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAAUC,MAAV,EAAkB;AAC7C,aAAOA,MAAP;AACH,KAFD,EAEG,UAAUC,KAAV,EAAiB;AAChB,aAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,KAJD;AAMAhB,IAAAA,KAAK,CAACY,YAAN,CAAmBO,QAAnB,CAA4BL,GAA5B,CAAgC,UAAUK,QAAV,EAAoB;AAChD,aAAOA,QAAP;AACH,KAFD,EAEG,UAAUH,KAAV,EAAiB;AAChB,aAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,KAJD;AAMAf,IAAAA,eAAe,CAACM,aAAhB,CAA8BC,SAA9B,EACCY,IADD,CACOC,CAAD,IAAa;AACf,WAAKC,WAAL,GAAmBD,CAAC,CAACE,IAAF,GAAS,SAAT,GAAqB,MAAxC;;AACA,UAAG,KAAKD,WAAL,KAAqB,SAAxB,EAAmC,CAElC;AACJ,KAND,EAOCE,KAPD,CAOQC,GAAD,IAAS;AACZ,WAAKH,WAAL,GAAmB,MAAnB;AACA,UAAII,KAAJ,CAAUD,GAAV;AACH,KAVD;AAWH;;AAED,MAAIE,UAAJ,GAAiB;AACb,WAAO,KAAKL,WAAZ;AACH;;AAvC2B,C,UACbhB,W,8FACdP,U;;;;;WAA0C,E;;;SAF1BI,U","sourcesContent":["import { observable } from \"mobx\";\r\nimport axios from \"axios\";\r\nimport loginRepository, { ILogin } from \"../Repository/loginRepository\";\r\nimport { threadId } from \"worker_threads\";\r\nimport FriendModel from \"./friendModel\";\r\n\r\nexport default class LoginModel {\r\n    private static _LoginModel : LoginModel;\r\n    @observable private _isPossible : string = '';\r\n    private _FriendModel: FriendModel = FriendModel.getInstance();\r\n\r\n    public static getInstance() :LoginModel{\r\n        if(!this._LoginModel) this._LoginModel = new LoginModel;\r\n        return this._LoginModel;\r\n    }\r\n\r\n    sendLoginData(loginData : ILogin ) {\r\n        sessionStorage.setItem('id', loginData.id);\r\n        axios.interceptors.request.use(function (config) {\r\n            return config;\r\n        }, function (error) {\r\n            return Promise.reject(error);\r\n        });\r\n\r\n        axios.interceptors.response.use(function (response) {\r\n            return response;\r\n        }, function (error) {\r\n            return Promise.reject(error);\r\n        });\r\n\r\n        loginRepository.sendLoginData(loginData)\r\n        .then((d : any) => {\r\n            this._isPossible = d.data ? 'success' : 'fail';\r\n            if(this._isPossible === 'success') {\r\n                \r\n            }\r\n        })\r\n        .catch((err) => {\r\n            this._isPossible = 'fail';\r\n            new Error(err);\r\n        });\r\n    }\r\n\r\n    get loginState() {\r\n        return this._isPossible;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}