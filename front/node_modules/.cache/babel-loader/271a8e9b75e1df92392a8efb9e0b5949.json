{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\Users\\\\ldk0225\\\\Desktop\\\\full-stack\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\Users\\\\ldk0225\\\\Desktop\\\\full-stack\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Users\\\\ldk0225\\\\Desktop\\\\full-stack\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _class2, _temp;\n\nimport chatRepository from \"../Repository/chatRepository\";\nimport { observable } from \"mobx\";\nlet ChatModel = (_class = (_temp = _class2 = class ChatModel {\n  constructor() {\n    _initializerDefineProperty(this, \"data\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"personalchat\", _descriptor2, this);\n\n    this.loadChatList();\n  }\n\n  static getInstance() {\n    if (!this._ChatModel) this._ChatModel = new ChatModel();\n    return this._ChatModel;\n  }\n\n  loadChatList() {\n    chatRepository.loadChatList().then(d => {\n      this.data = d.data;\n    }).catch(err => {\n      new Error(err);\n    });\n  }\n\n  loadChatData(from, to) {\n    chatRepository.loadChatData(from, to).then(d => {\n      debugger;\n    }).catch(err => {\n      new Error(err);\n    });\n  }\n\n  get getChatList() {\n    return this.data;\n  }\n\n}, _class2._ChatModel = void 0, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"data\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"personalchat\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class);\nexport { ChatModel as default };","map":{"version":3,"sources":["C:/Users/ldk0225/Desktop/full-stack/front/src/pages/mainBoard/Model/chatModel.ts"],"names":["chatRepository","observable","ChatModel","constructor","loadChatList","getInstance","_ChatModel","then","d","data","catch","err","Error","loadChatData","from","to","getChatList"],"mappings":";;;;;;AAAA,OAAOA,cAAP,MAA0C,8BAA1C;AACA,SAASC,UAAT,QAA2B,MAA3B;IAEqBC,S,gCAAN,MAAMA,SAAN,CAAgB;AAInBC,EAAAA,WAAR,GAAsB;AAAA;;AAAA;;AAClB,SAAKC,YAAL;AACH;;AAED,SAAcC,WAAd,GAAuC;AACnC,QAAG,CAAC,KAAKC,UAAT,EAAqB,KAAKA,UAAL,GAAkB,IAAIJ,SAAJ,EAAlB;AACrB,WAAO,KAAKI,UAAZ;AACH;;AAEOF,EAAAA,YAAR,GAA+B;AAC3BJ,IAAAA,cAAc,CAACI,YAAf,GACCG,IADD,CACOC,CAAD,IAAa;AACf,WAAKC,IAAL,GAAYD,CAAC,CAACC,IAAd;AACH,KAHD,EAICC,KAJD,CAIQC,GAAD,IAAS;AACZ,UAAIC,KAAJ,CAAUD,GAAV;AACH,KAND;AAOH;;AAGME,EAAAA,YAAP,CAAoBC,IAApB,EAAuCC,EAAvC,EAAyD;AACrDf,IAAAA,cAAc,CAACa,YAAf,CAA4BC,IAA5B,EAAkCC,EAAlC,EACCR,IADD,CACOC,CAAD,IAAO;AACT;AACH,KAHD,EAICE,KAJD,CAIQC,GAAD,IAAS;AACZ,UAAIC,KAAJ,CAAUD,GAAV;AACH,KAND;AAOH;;AAED,MAAIK,WAAJ,GAAiC;AAC7B,WAAO,KAAKP,IAAZ;AACH;;AApC0B,C,UACZH,U,uFACdL,U;;;;;WAAuC,E;;gFACvCA,U;;;;;;SAHgBC,S","sourcesContent":["import chatRepository, { IChatList } from \"../Repository/chatRepository\";\r\nimport { observable } from \"mobx\";\r\n\r\nexport default class ChatModel {\r\n    private static _ChatModel: ChatModel;\r\n    @observable private data: IChatList|[] =[];\r\n    @observable private personalchat;\r\n    private constructor() {\r\n        this.loadChatList();\r\n    }\r\n\r\n    public static getInstance() : ChatModel{\r\n        if(!this._ChatModel) this._ChatModel = new ChatModel;\r\n        return this._ChatModel\r\n    }\r\n\r\n    private loadChatList () : void {\r\n        chatRepository.loadChatList()\r\n        .then((d : any) => {\r\n            this.data = d.data;\r\n        })\r\n        .catch((err) => {\r\n            new Error(err);\r\n        });\r\n    }\r\n\r\n    \r\n    public loadChatData(from:string|null , to:string) : void {\r\n        chatRepository.loadChatData(from, to)\r\n        .then((d) => {\r\n            debugger;\r\n        })\r\n        .catch((err) => {\r\n            new Error(err);\r\n        });\r\n    }\r\n\r\n    get getChatList() : IChatList|[] {\r\n        return this.data;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}